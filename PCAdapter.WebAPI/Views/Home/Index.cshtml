@{
  ViewBag.Title = "Query";
}
@section styles{
  <link href="~/Content/jQuery-QueryBuilder/dist/css/query-builder.dark.min.css" rel="stylesheet" />
  <style type="text/css">
    .rule-operator-container > span{
      color: whitesmoke;
    }
    #timeline{
      width: 100%;
      height: 50px;
      border: 1px solid gray;
      border-radius: 3px;
      margin-top: 6px;
      margin-bottom: 6px;
    }
  </style>
}
@section scripts{
  <script type="text/javascript" src="~/Scripts/moment.min.js"></script>
  <script src="~/Content/jQuery-QueryBuilder/dist/js/query-builder.standalone.min.js"></script>
  <script type="text/javascript">
    var durations = [];
    var dataItems = [];
    var adapters = [];
    var query = "";
    var baseTitle = document.title;
    $(document).ready(function () {
      loadSavedRules();

      SetTableNote("Loading Adapter Configurations...", "table-warning");
      $.ajax({
        url: "/api/AdapterConfigs",
        method: "GET",
        success: function (data) {
          SetTableNote("Loaded Adapter Configurations. Please select one and Run a Query.", "table-info");
          adapters = data;

          var sel = $("#selAdapterConfig")[0];
          sel.innerHTML = "";
          sel.appendChild(document.createElement("option")).innerText = "Select a Configuration";
          for (var len = adapters.length, n = 0; n < len; n++) {
            var opt = document.createElement("option");
            opt.innerText = adapters[n].Name;
            opt.value = adapters[n].Id;
            sel.appendChild(opt);
          }

        }
      });
      $("#selAdapterConfig").change(function () {
        var selection = $("#selAdapterConfig").val();
        GetDataItems(selection);
      });

      $("#btnRunQuery").on("click", function () {
        var sel = $("#selSavedRules").val();
        var qb = JSON.parse(window.localStorage.getItem('queryBuilder'));
        var search = qb.savedRules.filter(function (e, i) { return e.name == sel; });
        if (search.length > 0) {
          $("#queryBuilder")[0].queryBuilder.setRules(search[0].rules);
          $("#btnQueryBuilder").click();
        }
      });
      $("#btnSaveQueryRequest").on("click", function () {
        var rules = $("#queryBuilder")[0].queryBuilder.getRules();
        var well = $("#modSaveQueryRules");
        well.html("");
        var ul = well[0].appendChild(document.createElement("ul"));//.append("<ul>");
        var fncListRules = function (rule, list) {
          if (typeof (rule.condition) !== "undefined") {
            var li = list.appendChild(document.createElement("li"));//("<li>" + rule.condition + "</li>");
            li.textContent = rule.condition;
            if (typeof (rule.rules) !== "undefined") {
              var liUl = li.appendChild(document.createElement("ul"));//("<ul>");
              for (var len = rule.rules.length, n = 0; n < len; n++) {
                fncListRules(rule.rules[n], liUl);
              }
            }
          } else {
            list.appendChild(document.createElement("li")).textContent = rule.field + " " + rule.operator + " " + rule.value;//("<li>" + rule.field + " " + rule.operator + " " + rule.value + "</li>");
            
          }
        }

        fncListRules(rules, ul);
        var qb = window.localStorage.getItem('queryBuilder');
        var idx = 1;
        if (typeof (qb) !== "undefined" && qb !== null && typeof (qb.savedRules) !== "undefined" && qb.savedRules !== null) {
          idx = qb.savedRules.length + 1;
        }
        $("#txtSaveQueryName").val("Query " + idx);

        $("#modSaveQuery").modal("show");
      });
      $("#btnSaveQuery").on("click", function () {
        var name = $("#txtSaveQueryName").val();
        var rules = $("#queryBuilder")[0].queryBuilder.getRules();

        saveQueryRules(name, rules);
      });
    });

    function loadSavedRules() {
      var sel = $("#selSavedRules")[0];
      sel.innerHTML = "";
      var qb = JSON.parse(window.localStorage.getItem('queryBuilder'));
      if (typeof (qb) !== "undefined" && qb !== null && typeof(qb.savedRules) !== "undefined" && qb.savedRules !== null) {
        sel.appendChild(document.createElement("option")).innerText = "Select a Query to Run";
        for (var len = qb.savedRules.length, n = 0; n < len; n++) {
          var opt = document.createElement("option");
          opt.value = qb.savedRules[n].name;
          opt.innerText = qb.savedRules[n].name;
          sel.appendChild(opt);
        }
      } else {
        sel.appendChild(document.createElement("option")).innerText = "No Saved Queries!";
      }
      return qb;
    }
    function saveQueryRules(name, rules) {
      var qb = JSON.parse(window.localStorage.getItem('queryBuilder'));
      if (typeof (qb) == "undefined" || qb == null) {
        qb = {
          savedRules: new Array()
        };
      }
      var search = qb.savedRules.filter(function (e, i) { return e.name == name; });
      if (search.length <= 0) {
        qb.savedRules.push({ name: name, rules: rules });
      } else {
        search[0].rules = rules;
      }
      window.localStorage.setItem('queryBuilder', JSON.stringify(qb));

      loadSavedRules();
    }

    function GetDataItems(adapterConfigId) {
      $.ajax({
        url: "/api/AdapterConfigs/" + adapterConfigId + "/DataItems",
        method: "GET",
        success: function (data) {
          dataItems = data;

          SetupQueryBuilder();
        }
      });
    }
    function CompleteDataset(src) {
      if (typeof src != "undefined" && src != null && src.length > 0) {
        for (var len = src.length, n = 0; n < len; n++) {
          let start = moment(src[n].Started);
          let end = moment(src[n].Ended);
          let diff = end.diff(start);
          src[n]["Duration"] = moment.utc(diff);
        }
        return src;
      }
      return [];
    }
    function QueryDuration(dataItemName) {
      query = $("#selDataItems option[value='" + dataItemName + "']").text();
      $.ajax({
        url: "/api/durations/today/" + encodeURIComponent(dataItemName),
        method: "GET",
        success: function (data) {
          document.title = query + " - " + baseTitle;
          durations = CompleteDataset(data);
          UpdateTable(durations);
        }
      });
    }
    function FilterDuration(expr) {
      var reg = new RegExp(expr, 'g');
      var nw = durations.filter(function (e, i) {
        return reg.test(e.Value);// eval(expr);
      });
      UpdateTable(nw);
    }
    function SetTableNote(message, cssClass) {
      $("#tblDurations tbody").html("");
      $("#tblDurations tfoot").html("");
      var td = $("#tblDurations tbody")[0].appendChild(document.createElement("tr")).appendChild(document.createElement("td"));
      td.setAttribute("class", cssClass);
      td.setAttribute("colspan", "3");
      td.textContent = message;
    }
    function UpdateTable(dataset) {
      var tbody = $("#tblDurations tbody")[0];
      tbody.innerHTML = "";
      if (typeof dataset != "undefined" && dataset != null && dataset.length > 0) {
        var timesum = 0;
        var cnt = 0;
        for (var len = dataset.length, n = 0; n < len; n++) {
          var tr = tbody.appendChild(document.createElement("tr"));
          tr.setAttribute("data-id", dataset[n].Id.toString());
          tr.appendChild(document.createElement("td")).textContent = (new Date(dataset[n].Started + "Z")).toLocaleString();
          tr.appendChild(document.createElement("td")).textContent = dataset[n].Value;
          tr.appendChild(document.createElement("td")).textContent = displayTime(dataset[n]);

          if (dataset[n].Ended != null) {
            timesum += moment.duration(moment(dataset[n].Ended).diff(moment(dataset[n].Started))).asMilliseconds();
            cnt++;
          }
        }
        var tf = $("#tblDurations tfoot")[0];
        tf.innerHTML = "";
        var tfr = tf.appendChild(document.createElement("tr"));
        tfr.appendChild(document.createElement("td")).innerText = "";
        tfr.appendChild(document.createElement("td")).innerText = "Total Time";
        console.log("Total Duration: ", timesum);
        tfr.appendChild(document.createElement("td")).innerText = moment.duration(timesum).humanize();
        tfr = tf.appendChild(document.createElement("tr"));
        tfr.appendChild(document.createElement("td")).innerText = "";
        tfr.appendChild(document.createElement("td")).innerText = "Total Completed Records";
        tfr.appendChild(document.createElement("td")).innerText = cnt.toString();
      } else {
        SetTableNote("No Durations found for " + query, "warning");
      }
    }


    // https://stackoverflow.com/questions/14350148/convert-ticks-to-time-format-hhmmss
    function displayTime(data) {
      if (data.Ended == null) {
        return "Ongoing";
      }
      //let start = moment(data.Started);
      //let end = moment(data.Ended);
      //let diff = end.diff(start);

      return data.Duration.format("HH:mm:ss.SS");// moment.utc(diff).format("HH:mm:ss.SS");
      //var dur = moment.duration(ticksMS);
      //return dur.toString();//.humanize();
    }
    function localToUTCMoment(d) {
      var localDateString = d;
      var localDateStringFormat = "MM/DD/YYYY";
      var utcDateStringFormat = "YYYY-MM-DD HH:mm:ssZ";

      var utcMoment = moment.utc(moment(localDateString, localDateStringFormat).utc().format(utcDateStringFormat));

      return utcMoment
    }
    function pad(n, width) {
      var n = n + '';
      return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
    }
  </script>
  <script type="text/javascript">
    function SetupQueryBuilder() {
      var dataItemValues = dataItems.map(function (e, i) { return { value: e.Name, label: e.Name }; });
      $("#queryBuilder").queryBuilder({
        conditions: ['AND', 'OR', 'WHILE'],
        rules: {
          condition: 'AND',
          flags: {
            condition_readonly: true,
            no_add_rule: true,
            no_add_group: true
          },
          rules: [
            {
              id: 'dataItem',
              operator: 'equal',
              flags: {
                no_delete: true
              }
            },
            {
              condition: 'AND',
              flags: {
                condition_readonly: true,
                no_add_group: true,
                no_add_rule: true,
                no_delete: true
              },
              rules: [
                {
                  id: 'started',
                  operator: 'greater_or_equal',
                  flags: {
                    no_delete: true
                  }
                },
                {
                  id: 'ended',
                  operator: 'less_or_equal',
                  flags: {
                    no_delete: true
                  }
                }
              ]
            },
            {
              condition: 'AND',
              flags: {
                condition_readonly: true,
                no_delete: true
              },
              rules: [
                {
                  id: 'value',
                  operator: 'in'
                },
                {
                  condition: 'WHILE',
                  rules: [
                    {
                      id: 'dataItem'
                    },
                    {
                      condition: 'AND',
                      rules: [
                        {
                          id: 'value',
                          operator: 'in'
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        filters: [
          {
            id: 'dataItem',
            label: 'DataItem',
            type: 'string',
            input: 'select',
            values: dataItemValues,
            operators: ['equal'],
            validation: {
              allow_empty_value: false,
              messages: {
                allow_empty_value: "Must select a DataItem."
              }
            }
          },
          {
            id: 'value',
            label: 'DataItem Value',
            type: 'string',
            operators: ['in', "equal", "greater_or_equal", "less_or_equal", "greater", "less"],
            default_value: "(.*)"
          },
          {
            id: 'started',
            label: 'From',
            type: 'date',
            default_value: new Date().toLocaleDateString(),
            operators: ['greater_or_equal']
          },
          {
            id: 'ended',
            label: 'To',
            type: 'date',
            default_value: new Date().toLocaleDateString(),
            operators: ['less_or_equal']
          }
        ]
      });
    }

    $(document).ready(function () {



      $("#btnQueryBuilder").on("click", function () {
        var qb = $("#queryBuilder")[0].queryBuilder;
        if (qb.validate()) {
          var rules = qb.getRules().rules;
          console.log("Rules: ", rules);
          var dataItemRule = rules[0];
          var startedRule = rules[1].rules[0];
          var endedRule = rules[1].rules[1];
          var additionalRules = rules[2].rules;

          var startDate = localToUTCMoment(startedRule.value);// moment(startedRule.value).valueOf();
          var endDate = localToUTCMoment(endedRule.value);//moment(endedRule.value).valueOf();

          var queryOptions = {
            dataItem: dataItemRule.value,
            start: startDate,
            end: endDate,
            rules: additionalRules,
            condition: "AND",
            callback: (function (data) {
              data = processRule(this.rules, this.condition, data, this.options);
              durations = CompleteDataset(data);
              UpdateTable(data);
              drawTimeline({ start: this.options.start, end: this.options.end });
            }).bind({
              rules: additionalRules,
              condition: "AND",
              options: {
                start: startDate,
                end: endDate
              }
            })
          }
          queryData(queryOptions);

        }
      });
    });

    function queryData(options) {//dataItem, start, end, rules, condition, callback, postProcess) {
      if (typeof postProcess == "undefined" || postProcess == null) {
        postProcess = true;
      }
      // During: dataitem/{name}/from/{start:datetime}/to/{end:datetime}/during/{ids:int[]}
      var from = moment.utc(options.start).format('YYYY-MM-DD');
      var to = moment.utc(options.end).format('YYYY-MM-DD');
      var url = "api/durations/dataitem/" + options.dataItem + "/from/" + from + "/to/" + to;
      var method = "GET";
      var body = null;
      var traditional = false;
      var contentType = "";
      console.log("[queryData] options.duringIds: ", options.duringIds);
      if (typeof (options.duringIds) !== "undefined") {
        url = "api/Durations/dataitem/GetDuring";
        contentType = "application/json";
        from = moment.utc(options.start).format();
        to = moment.utc(options.end).format();
        body = {
          name: options.dataItem,
          start: from,
          end: to,
          ids: options.duringIds
        }
        method = "POST";
      }
      var request = {
        url: url,
        method: method,
        data: JSON.stringify(body),
        contentType: contentType,
        success: (function (data) {
          //console.log("[QueryBuilder.queryData] Preprocessing length: ", data.length);
          if (this.postProcess) {
            data = processRule(this.rules, this.condition, data, { start: this.start, end: this.end });
          }
          this.callback(data);
        }).bind({ rules: options.rules, condition: options.condition, start: options.start, end: options.end, callback: options.callback, postProcess: options.postProcess }),
        async: false
      };

      $.ajax(request);
    }
    function processRule(rules, condition, dataSource, options, upperIds) {
      var predicateSources = {
        "AND": [],
        "OR": []
      };
      if (typeof rules !== "undefined" && rules != null && rules.length > 0) {
        //console.log("PROCESSING " + rules.length + " RULES");
        for (var len = rules.length, n = 0; n < len; n++) {
          var rule = rules[n];
          //console.log("Processing Rule[" + rule.field + "]: ", rule);
          if (typeof rule.condition !== "undefined" && typeof rule.rules !== "undefined") {
            if (rule.condition == "WHILE") {
              var whileSource = processRule(rule.rules, "WHILE", [], options, dataSource.map(function (e, i) { return e.Id; }));
              console.log("[QueryBuilder.processRule] While yielded " + whileSource.length + " results.");
              if (whileSource.length > 0) {
                console.log("[While] Before filter: ", dataSource.length);
                var filterFunction = function (dataObject, i) {
                  return (dataObject.Ended !== null &&
                    whileSource.filter(function (whileObject, j) {
                      return (whileObject.Ended !== null
                        && (
                          (
                            (dataObject.Started >= whileObject.Started && dataObject.Started <= whileObject.Ended) // Started During
                          )
                          ||
                          (
                            (dataObject.Ended >= whileObject.Started && dataObject.Ended <= whileObject.Ended) // Ended During
                          )
                        )
                      )
                    }).length > 0);
                }
                var tmpSource = dataSource.filter(filterFunction);
                console.log("[While] After filter: ", tmpSource.length);
                predicateSources["AND"].push(tmpSource);
              } else {
                predicateSources["AND"].push(new Array());
              }
            } else {
              predicateSources[condition].push(processRule(rule.rules, rule.condition, dataSource, options, dataSource.map(function (e, i) { return e.Id; })));
            }
          } else if (rule.id == "value") {
            console.log("\tApplying [" + condition + "] " + rule.field + " with: ", rule.value);
            if (rule.operator == "in") {
              var reg = new RegExp(rule.value, 'g');
              predicateSources[condition].push(dataSource.filter(function (e, i) {
                return reg.test(e.Value);
              }));
            } else if (rule.operator == "equal") {
              predicateSources[condition].push(dataSource.filter(function (e, i) {
                return e.Value == rule.value;
              }));
            } else if (rule.operator == "greater_or_equal") {
              predicateSources[condition].push(dataSource.filter(function (e, i) {
                return e.Value >= rule.value;
              }));
            } else if (rule.operator == "less_or_equal") {
              predicateSources[condition].push(dataSource.filter(function (e, i) {
                return e.Value <= rule.value;
              }));
            } else if (rule.operator == "greater") {
              predicateSources[condition].push(dataSource.filter(function (e, i) {
                return e.Value > rule.value;
              }));
            } else if (rule.operator == "less") {
              predicateSources[condition].push(dataSource.filter(function (e, i) {
                return e.Value < rule.value;
              }));
            }
          } else if (rule.id == "dataItem") {
            console.log("Querying DataItem DataSource: ", dataSource);
            var queryOptions = {
              dataItem: rule.value,
              start: options.start,
              end: options.end,
              rules: rule.rules,
              condition: condition,
              duringIds: upperIds,
              callback: function (data) {
                //console.log("\tGot " + data.length + " results from " + rule.field);
                //console.log("\t\tParent Rules Reference: ", rules);
                //nwSource = data;
                if (typeof data.filter == "undefined") {
                  console.log("Caught culprit", data);
                }
                dataSource = data;
                predicateSources["OR"].push(data);
              },
              postProcess: false
            }
            queryData(queryOptions);
            console.log("End DataItem");
          }
        }
        console.log("Predicate Sources for Condition[" + condition + "]: ", predicateSources);
        var nwSource = [];// = dataSource;// [];
        var addUnique = function (src, cond, nw) {
          if (typeof src.filter === "undefined") {
            console.warn("Source.filter is undefined",src);
          } else if (typeof nw.filter === "undefined") {
            console.warn("nw.filter is undefined");
          }
          if (cond == "AND") {
            if (nw.length == 0) {
              return [];
            } else {
              return src.filter(v => nw.filter(w => w.Id == v.Id).length > 0);
            }
          } else if (cond == "OR") {
            if (src.length == 0) {
              return nw;
            } else {
              for (var slen = src.length, s = 0; s < slen; s++) {
                if (nw.filter(w => w.Id == src[s].Id).length <= 0) {
                  nw.push(src[s]);
                }
              }
              return nw;// src.filter(v => nw.filter(w => w.Id == v.Id).length <= 0);
            }
          } else {
            console.error("Unknown condition type");
            return src;
          }
        }
        if (predicateSources["OR"].length > 0) {
          for (var olen = predicateSources["OR"].length, o = 0; o < olen; o++) {
            nwSource = addUnique(predicateSources["OR"][o], "OR", nwSource);
          }
        }
        if (predicateSources["AND"].length > 0 && condition !== "WHILE") {
          if (nwSource.length == 0) {
            nwSource = dataSource;
          }
          for (var alen = predicateSources["AND"].length, a = 0; a < alen; a++) {
            nwSource = addUnique(predicateSources["AND"][a], "AND", nwSource);
          }
        } else if (condition == "WHILE"){
          nwSource = dataSource;
        }
      }
      //console.log("Output for Condition[" + condition + "]: ", nwSource);
      return nwSource;
    }
  </script>
  <script type="text/javascript">
    function drawTimeline(options){
      var startTime = options.start.local();
      var endTime = options.end.local();
      //var fullSpan = moment.duration(endTime.diff(startTime)).asMilliseconds();// endTime - startTime;
      
      var canv = $("#timeline")[0];
      var canvGBCR = canv.getBoundingClientRect();
      var canvSize = {
        width: canvGBCR.width,
        height: canvGBCR.height,
        time: {
          stringStart: startTime,
          stringEnd: endTime,
          start: startTime.startOf('day'),
          end: endTime.endOf('day'),
        },
        ticks: {
          start: 0,
          totalSpan: 0,
          end: 0,
          getPosFromDate: function (d) {
            var mDur = moment.duration(d.diff(canvSize.time.start)).asMilliseconds();
            //var inverseSpan = canvSize.ticks.totalSpan - mDur;
            var spanPercent = (mDur / canvSize.ticks.totalSpan);
            return spanPercent * canvSize.width;
          },
          getWidthFromDates: function (s, e) {
            var spanPercent = moment.duration(e.diff(s)).asMilliseconds() / canvSize.ticks.totalSpan;
            return spanPercent * canvSize.width;
          }
        }
      };
      canvSize.ticks.totalSpan = moment.duration(canvSize.time.end.diff(canvSize.time.start)).asMilliseconds();
      canvSize.ticks.end = canvSize.ticks.totalSpan;

      console.log("Canvas Size: ", canvSize);
      var ctx = canv.getContext('2d');
      

      var clrs = [
        "red",
        "blue",
        "green"
      ];
      var clrIndex = 0;
      ctx.fillStyle = "white";
      ctx.clearRect(0, 0, canvSize.width, canvSize.height);
      canv.width = canvSize.width;
      canv.height = canvSize.height;
      
      var textMargin = 2;
      var fontSize = 14;
      var mapYStart = (canvSize.height * 0.1) + (fontSize);
      var mapHeight = (canvSize.height * 0.9) - mapYStart;
      var drawnPositions = new Array();


      for(var len = durations.length,n=0;n<len;n++){
        var item = durations[n];
        if (item != null && item.Ended != null){
          ctx.fillStyle = clrs[clrIndex];
          var st = moment.utc(item.Started + "Z").local(),
            et = moment.utc(item.Ended + "Z").local();
          var pos = {
            x: canvSize.ticks.getPosFromDate(st),// (moment.duration(endTime.diff(st)).asMilliseconds() / fullSpan) * canvSize.width,
            y: mapYStart,
            w: canvSize.ticks.getWidthFromDates(st,et),// (ts / fullSpan) * canvSize.width,
            h: mapHeight,
            positions: {
              start: canvSize.ticks.getPosFromDate(st),
              end: canvSize.ticks.getPosFromDate(et)
            },
            time: {
              start: st,
              end: et
            }
          };
          drawnPositions.push(pos);
      
          //ctx.moveTo(pos.x, pos.y);
          ctx.fillRect(pos.x, pos.y, pos.w, pos.h);

          clrIndex++;
          if (clrIndex == clrs.length){
            clrIndex = 0;
          }
        }
      }

      // Draw Markers
      var markers = new Array();
      var markerHourSpan = 2;
      var markerWidth = 4;
      var markerOff = markerWidth / 2;
      var yHeight = canvSize.height * 0.1;
      var tickYPos = canvSize.height - (yHeight);
      for (var i = 0; i < (moment.duration(canvSize.ticks.totalSpan).asHours() / markerHourSpan); i++) {
        var hour = i * markerHourSpan;
        var time = moment(canvSize.time.start).add(hour, 'hours');
        var marker = {
          time: time,
          x: 0,
          y: tickYPos,
          w: markerWidth,
          h: yHeight
        };
        marker.x = canvSize.ticks.getPosFromDate(marker.time) - markerOff;// (moment.duration(endTime.diff(marker.time)).asMilliseconds() / fullSpan) * canvSize.width;
        markers.push(marker);

      }
      ctx.fillStyle = "black";
      ctx.strokeStyle = "black";
      ctx.font = fontSize + "px Arial";
      ctx.textBaseline = "top";
      ctx.textAlign = "center";
      for (var len = markers.length, n = 0; n < len; n++) {
        ctx.moveTo(markers[n].x, markers[n].y);
        ctx.fillRect(markers[n].x, markers[n].y, markers[n].w, markers[n].h);

        ctx.fillText(markers[n].time.format("h A"), markers[n].x, textMargin);
      }

    };

  </script>
}
<canvas id="timeline">Canvas not supported</canvas>
<div class="row">
  <div class="col-lg-6 col-md-6">
    <div class="row">
      <div class="col-lg-6 col-md-6">
        <div class="form-group">
          <label for="selAdapterConfig">Adapter Configuration:</label>
          <select id="selAdapterConfig" class="form-control"></select>
        </div>
      </div>
      <div class="col-lg-6 col-md-6">
        <div class="input-group">
          <select id="selSavedRules" class="form-control"></select>
          <span class="input-group-btn">
            <button type="button" class="btn btn-primary" id="btnRunQuery"><i class="glyphicon glyphicon-play"></i></button>
          </span>
        </div>
        <button type="button" class="btn btn-default btn-block" id="btnSaveQueryRequest">Save Query</button>
      </div>
    </div>
    <div id="queryBuilder"></div>
    <button type="button" class="btn btn-block btn-primary" id="btnQueryBuilder">Run Query</button>
  </div>
  <div class="col-lg-6 col-md-6">
    <div class="table-responsive">
      <table id="tblDurations" class="table table-condensed table-hover table-striped">
        <thead>
          <tr>
            <th>Time</th>
            <th>Value</th>
            <th>Duration <small>(hh:mm:ss.ms)</small></th>
          </tr>
        </thead>
        <tbody></tbody>
        <tfoot></tfoot>
      </table>
    </div>
  </div>
</div>
<br />

<div id="modSaveQuery" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Save Query</h4>
      </div>
      <div class="modal-body">
        <p>Are you sure you wish to save the following query:</p>
        <div id="modSaveQueryRules" class="well">

        </div>
        <div class="input-group">
          <input type="text" id="txtSaveQueryName" value="" class="form-control" />
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button id="btnSaveQuery" type="button" class="btn btn-primary" data-dismiss="modal">Finish</button>
      </div>
    </div>

  </div>
</div>